<?php

/**
 * @file
 * The main Islandora Metadata Extras module file.
 */

/**
 * Implements hook_menu().
 */
function islandora_metadata_extras_menu() {
  $items = array();
  $items['admin/islandora/tools/metadata_extras'] = array(
    'title' => 'Metadata Extras',
    'description' => 'Configure the Islandora Metadata Extras module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_metadata_extras_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/manage/solr'] = array(
    'title' => 'Solr Document',
    'page callback' => 'islandora_metadata_extras_get_solr_xml',
    'page arguments' => array(2),
    'access callback' => 'islandora_metadata_extras_solr_document_access_callback',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora/object/%islandora_object/edit_metadata'] = array(
    'title' => 'Edit metadata',
    'page callback' => 'islandora_metadata_extras_edit_metadata_direct_link',
    'page arguments' => array(2),
    'access callback' => 'islandora_metadata_extras_edit_metadata_tab_access_callback',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}

/**
 * Access callback.
 *
 * @param AbstractObject $object
 *   The Islandora object.
 *
 * @return bool
 *   TRUE if the user is allowed to access the Solr document, FALSE
 *   otherwise.
 */
function islandora_metadata_extras_solr_document_access_callback($object) {
  return islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $object) &&
    variable_get('islandora_metadata_extras_show_solr_doc', FALSE);
}

/**
 * Access callback.
 *
 * @param AbstractObject $object
 *   The Islandora object.
 *
 * @return bool
 *   TRUE if the user is allowed to access the "edit metadata" link, FALSE
 *   otherwise.
 */
function islandora_metadata_extras_edit_metadata_tab_access_callback($object) {
  return islandora_object_access(ISLANDORA_METADATA_EDIT, $object) &&
    variable_get('islandora_metadata_extras_show_edit_metadata_tab', FALSE);
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_metadata_extras_islandora_view_object($object) {
  if (variable_get('islandora_metadata_extras_embed_dc_in_head', FALSE)) {
    module_load_include('inc', 'islandora_metadata_extras', 'includes/utilities');
    $dc = islandora_metadata_extras_get_dc_values($object['DC']->content);
    drupal_alter('islandora_metadata_extras_dc_in_head', $dc, $object);
    $key_salt = 0;
    foreach ($dc as $element => $values) {
      foreach ($values as $value) {
        // This output is consistent with Zotero's use of DC, e.g.,
        // <meta name="DC.type" content="image" />.
        $data = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => 'DC.' . $element,
            'content' => $value,
          ),
        );
        drupal_add_html_head($data, 'islandora_metadata_extras_dc_meta_tags' . $key_salt++);
      }
    }
  }
  return array();
}

/**
 * Implements hook_islandora_solr_object_result_alter().
 */
function islandora_metadata_extras_islandora_solr_object_result_alter(&$search_result, $query_processor) {
  module_load_include('inc', 'islandora_metadata_extras', 'includes/utilities');
  if (variable_get('islandora_metadata_extras_use_collection_label', FALSE)) {
    $collection_field = variable_get('islandora_solr_member_of_collection_field', 'RELS_EXT_isMemberOfCollection_uri_ms');
    if (isset($search_result['solr_doc'][$collection_field]) && is_array($search_result['solr_doc'][$collection_field])) {
      foreach ($search_result['solr_doc'][$collection_field] as $collection_pid) {
        $search_result['solr_doc'][$collection_field] = islandora_metadata_extras_pid_to_label($collection_pid);
      }
    }
  }
  if (variable_get('islandora_metadata_extras_rewrite_namespace', FALSE)) {
    $namespace_field = variable_get('islandora_metadata_extras_namespace_field', 'PID_namespace_ss');
    $pid = $search_result['solr_doc']['PID'];
    $search_result['solr_doc'][$namespace_field] = islandora_metadata_extras_namespace_to_label($pid);
  }
}


/**
 * Implements hook_islandora_solr_facet_bucket_classes_alter().
 */
function islandora_metadata_extras_islandora_solr_facet_bucket_classes_alter(&$buckets, $query_processor) {
  if (variable_get('islandora_metadata_extras_rewrite_facets', FALSE)) {
    $facet_fields_configured = variable_get('islandora_metadata_extras_facet_field', 'mods_accessCondition_use_and_reproduction_ms');
    $facet_fields_configured = explode(" ", $facet_fields_configured);
    foreach ($buckets AS &$facet) {
      $test = $facet['query']['f']['0'];
      if (isset($test)) {
        foreach ($facet_fields_configured AS $facet_field) {
          if (strpos($test, $facet_field) !== false) {
            $facet['label'] = islandora_metadata_extras_facet_convert($facet['label']);
          }
        }
      }
    } 
  }
}


/**
 * Implements hook_islandora_view_object_alter().
 */
function islandora_metadata_extras_islandora_view_object_alter(&$object, &$rendered) {
  if (variable_get('islandora_metadata_extras_hide_empty_metadata_values', FALSE)) {
    drupal_add_js(drupal_get_path('module', 'islandora_metadata_extras') . '/js/hide_empty_metadata_values.js', 'file');
  }

  if (variable_get('islandora_metadata_extras_show_pretty_dates', FALSE)) {
    global $language;
    drupal_add_js(array('islandora_metadata_extras' => array('locale' => $language->language)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'islandora_metadata_extras') . '/js/convert_date_values.js', 'file');
  }
}

/**
 * Theme preprocess function.
 */
function islandora_metadata_extras_preprocess_islandora_solr_wrapper(&$variables) {
  if (variable_get('islandora_metadata_extras_hide_empty_values_in_search_results', FALSE)) {
    drupal_add_js(drupal_get_path('module', 'islandora_metadata_extras') . '/js/hide_empty_values_in_search_results.js', 'file');
  }
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function islandora_metadata_extras_islandora_datastream_alter($object, $datastream, &$context) {
  if (variable_get('islandora_metadata_extras_add_uuid_to_mods', FALSE)) {
    if ($object['MODS'] && $datastream->id == 'MODS' && $context['action'] == 'ingest') {
      // Check to see if we already have an identifier element with type
      // 'uuid' and if not, add one.
      $dom = new DOMDocument();
      $dom->loadXML($datastream->content);
      $xpath = new DOMXPath($dom);
      $xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
      $existing_uuid_identifiers = $xpath->query("//mods:identifier[@type='uuid']");
      if ($existing_uuid_identifiers->length === 0) {
        module_load_include('inc', 'islandora_metadata_extras', 'includes/utilities');
        if ($with_uuid = islandora_metadata_extras_add_uuid_to_mods($object->id, $datastream->content)) {
          $datastream->setContentFromString($with_uuid);
        }
      }
    }
  }
}

/**
 * Theme preprocess function.
 */
function islandora_metadata_extras_preprocess_islandora_default_edit(&$variables) {
  if (variable_get('islandora_metadata_extras_show_datastream_checksums', FALSE)) {
    $variables['datastream_table']['header'][] = array('data' => t('Checksum'));
    $islandora_object = $variables['islandora_object'];
    $rows = $variables['datastream_table']['rows'];

    foreach ($islandora_object as $ds) {
      if ($ds->checksumType == 'DISABLED') {
        $data = $ds->checksumType;
      }
      else {
        $data = $ds->checksumType . ': ' . $ds->checksum;
      }
      $checksum_data = array(
        'class' => 'datastream-checksum',
        'data' => $data,
      );
      $checksums[] = $checksum_data;
    }

    for ($i = 0; $i < count($rows); $i++) {
      $rows[$i][] = $checksums[$i];
    }
    $variables['datastream_table']['rows'] = $rows;
  }
}

/**
 * Menu callback.
 */
function islandora_metadata_extras_get_solr_xml($object) {
  $query_processor = new IslandoraSolrQueryProcessor();
  $pid = preg_replace('/:/', '\:', $object->id);
  $query_processor->solrQuery = 'PID:' . $pid;
  $query_processor->solrLimit = '1';
  $query_processor->solrParams['wt'] = 'xml';
  $query_processor->solrParams['indent'] = TRUE;
  $query_processor->executeQuery(FALSE);
  return '<pre>' . json_encode($query_processor->islandoraSolrResult['response']['objects'][0]['solr_doc'],  JSON_PRETTY_PRINT) . '</pre>';
}

/**
 * Menu callback.
 */
function islandora_metadata_extras_edit_metadata_direct_link($object) {
  $configured_dsids = variable_get('islandora_metadata_extras_metadata_dsids', 'MODS,MADS');
  $dsids = explode(',', $configured_dsids);
  // Cycle through each DSID and choose the first one that the object has.
  // We don't need to keep track since drupal_goto() exits.
  foreach ($dsids as $dsid) {
    $dsid_to_link_to = trim($dsid);
    if ($object[$dsid_to_link_to]) {
      drupal_goto('islandora/object/' . $object->id . '/datastream/' . $dsid_to_link_to . '/edit');
    }
    else {
      continue;
    }
  }
  drupal_set_message(
    t('This object does not have any of the configured datastreams (!dsids).',
    array('!dsids' => $configured_dsids)),
    'warning'
  );
  // We want to display something on the resulting page,
  // so return the same message.
  return t('This object does not have any of the configured datastreams (!dsids).',
    array('!dsids' => $configured_dsids));
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function islandora_metadata_extras_admin_form_validate($form, &$form_state){
  $break_character = "|";
  $rewrite_namespace = $form_state['values']['islandora_metadata_extras_rewrite_namespace'];
  $rewrite_facets = $form_state['values']['islandora_metadata_extras_rewrite_facets'];
  if ($rewrite_namespace == 1) {
    $namespace_replacements = explode("\n", $form_state['values']['islandora_metadata_extras_namespace_replacements']);
    foreach ($namespace_replacements AS $replacement) {
      if (strpos($replacement, $break_character) == false) {
        form_set_error('islandora_metadata_extras', t('One or more of your replacements is missing the | character.'));
      }
    }
  }
  if ($rewrite_facets == 1) {
    $facet_replacements = explode("\n", $form_state['values']['islandora_metadata_extras_facet_replacements']);
    foreach ($facet_replacements AS $replacement) {
      if (strpos($replacement, $break_character) == false) {
        form_set_error('islandora_metadata_extras', t('One or more of your replacements is missing the | character.'));
      }
    }
  }
}
